#!/usr/bin/python3

import subprocess
import os
from json import load
import sys
from multiprocessing import cpu_count

selfdir = os.path.dirname(os.path.realpath(__file__))
example = "/../Makefile"

try:
	subprocess.check_output(["ccache", "-V"])
	ccache = True
except:                                                                                                   
    ccache = False

with open(selfdir + example, 'r') as makefile_file:
	
	makefile = makefile_file.read()
	with open(sys.argv[1]) as generator_file:
		generator = load(generator_file)
		if (generator.get("parallel", True)):
			makefile = makefile.replace("{mflags}", "j$(CPUS)")
		else:
			makefile = makefile.replace("{mflags}", "j1")
		makefile = makefile \
			.replace("{name}",		generator.get("name",	generator.get("target",	"UNDEFINED"))) \
			.replace("{target}",	generator.get("target",	os.environ.get("TARGET", "UNDEFINED"))) \
			.replace("{library}",	"TRUE" if generator.get("library", False) else "FALSE") \
			.replace("{srcdir}",	generator.get("srcdir",	os.environ.get("SRCDIR", "src"))) \
			.replace("{incdir}",	generator.get("incdir",	os.environ.get("INCDIR", "includes"))) \
			.replace("{builddir}",	generator.get("builddir", os.environ.get("BUILDDIR", "build"))) \
			.replace("{tardir}",	generator.get("tardir",	os.environ.get("TARDIR", "bin"))) \
			.replace("{srcext}",	generator.get("srcext",	"c")) \
			.replace("{objext}",	generator.get("objext",	"o")) \
			.replace("{cflags}",	generator.get("cflags",	os.environ.get("CFLAGS", "-Wextra -Wall"))) \
			.replace("{cxxflags}",	generator.get("cxxflags",	os.environ.get("CXXFLAGS", "-Wextra -Wall"))) \
			.replace("{makedep}",	generator.get("makedep","")) \
			.replace("{lib}",		generator.get("lib",	"")) \
			.replace("{inc}",		generator.get("inc",	"")) \
			.replace("{linker}",	generator.get("linker",	"ar -rcs")) \
			.replace("{indexer}",	generator.get("indexer","ranlib")) \
			.replace("{rm}",		generator.get("rm",		"rm -rf")) \
			.replace("{mkdir}",		generator.get("mkdir","mkdir -p")) \
			.replace("{generator}", sys.argv[0]) \
			.replace("{genconfig}",	sys.argv[1]) \
			.replace("{parallel}",	generator.get("parallel","TRUE" if generator.get("parallel", True) else "FALSE")) \
			.replace("{cpus}",		str(cpu_count()))
		if ccache:
			makefile = makefile \
				.replace("{cc}",	"ccache " + generator.get("cc",	os.environ.get("CC", "gcc").replace("ccache", "")).strip()) \
				.replace("{cxx}",	("ccache " + generator.get("cxx",os.environ.get("CXX", "g++").replace("ccache", "")).strip()))
		else:
			makefile = makefile.replace("{cc}",		generator.get("cc",		os.environ.get("CC", "gcc")))
		makefile = makefile.replace("{sources}", " \\\n\t".join([os.path.join(dp, f) for dp, dn, filenames in os.walk(generator.get("srcdir",	os.environ.get("SRCDIR", "src"))) for f in filenames if os.path.splitext(f)[1] == "." + generator.get("srcext", "c")]))
		print(makefile)